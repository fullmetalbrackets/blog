---
import { getCollection } from "astro:content";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<style scoped>
  h2 {
    margin-bottom: 0.3em;
    font-family: "M Plus Rounded 1c Reg";
  }
  span {
    line-height: 1.4;
  }
  .desc {
    line-height: 1.4;
  }
  ul {
    background-color: var(--blockquote);
    border-radius: 0.5em;
    margin: 0.5em auto 0 auto;
    padding: 1.5em 1.5em 1em 1.5em;
    border: 2px solid var(--primary);
  }
  li {
    display: inline-flex;
    flex-direction: column;
    margin: 0 auto 1em auto;
    padding-bottom: 0.5em;
    line-height: 1.2;
    border-bottom: 2px solid transparent;
  }
  li:last-of-type {
    margin: 0 auto;
    padding: auto;
  }
  .posts-title {
    display: inline-flex;
    flex-direction: row;
    margin: 0.25em auto;
  }
  .posts-title a,
  .posts-title a:active,
  .posts-title a:visited {
    color: var(--primary);
  }
  .posts-title a:hover {
    color: var(--menu);
  }
  li:hover {
    padding-bottom: 0.5em;
    border-bottom: 2px solid var(--hover);
  }
  @media (hover: hover) {
    a:hover button {
      box-shadow: -4px -4px 0 #000;
      transform: translate(4px, 4px);
    }
    a:hover button {
      outline-offset: 1px;
    }
  }
  @media (hover: none) {
    a:hover button {
      background-color: var(--menu);
    }
  }
  @media screen and (min-width: 200px) and (max-width: 667px) {
    main {
      margin: 0 10px;
    }
    ul {
      padding: 1em 0.75em 0.5em 0.75em;
      width: 100%;
      margin: 0;
    }
  }
</style>

<section>
  <h2>Featured Articles</h2>
  <ul>
    <li>
      <a href="/blog/reverse-proxy-using-nginx-pihole-cloudflare/" rel="prefetch-intent" data-umami-event="recent-post-proxy-pihole">
      <p class="posts-title">Setting up a reverse proxy for HTTPS with a custom domain using Nginx Proxy Manager, Pi-Hole and Cloudflare</p>
      <p class="desc">
        I've used a reverse proxy to access my self-hosted apps and services for years, but I recently re-did everything from scratch and decided to write it down. When done, we'll be able to access our apps and services through a custom domain, with unique sub-domains for each app or service, with full HTTPS and accessible only locally.
      </p>
      </a>
    </li>    
    <li>
      <a href="/blog/self-host-website-cloudflare-tunnel/" rel="prefetch-intent" data-umami-event="recent-post-tunnel-apps">
      <p class="posts-title">Setup a Cloudflare Tunnel to securely access self-hosted apps with a domain from outside the home network</p>
      <p class="desc">
        Cloudflare Tunnels have been around for a few years and are well regarded alternatives for VPNs or port-forwarding on a router. They are often used to expose access to self-hosted apps from outside the local network with minimal config or hassle. Here's how it's done.
      </p>
      </a>
    </li>
    <li>
      <a href="/blog/expose-plex-tailscale-vps/" rel="prefetch-intent" data-umami-event="recent-post-plex-tailscale">
      <p class="posts-title">How to securely expose Plex from behind CGNAT using Tailscale and a free Oracle VM
      </p>
      <p class="desc">
        I wrote before about securely exposing Plex for external access, but my previous solution relied on Cloudflare Tunnel and it was technically against their TOS. So I switched to using a Oracle VM on their free-tier, connecting it to my home network with Tailscale, and exposing Plex via reverse proxy. It works like a charm!
      </p>
      </a>
    </li>
  </ul>
</section>
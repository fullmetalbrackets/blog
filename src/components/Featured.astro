---
import { getCollection } from "astro:content";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<style scoped>
  h2 {
    margin-bottom: 0.3em;
  }
  span {
    font-size: 110%;
    line-height: 1.4;
  }
  .desc {
    line-height: 1.4;
    font-size: 90%;
  }
  ul {
    background-color: var(--blockquote);
    border-radius: 0.5em;
    margin: 0.5em auto 0 auto;
    padding: 1.5em 1.5em 1em 1.5em;
    border: 2px solid var(--primary);
  }
  li {
    display: inline-flex;
    flex-direction: column;
    margin: 0 auto 1em auto;
    padding-bottom: 0.5em;
    line-height: 1.2;
    border-bottom: 2px solid transparent;
  }
  li:last-of-type {
    margin: 0 auto;
    padding: auto;
  }
  .posts-title {
    display: inline-flex;
    flex-direction: row;
    margin: 0.25em auto;
  }
  .posts-title a,
  .posts-title a:active,
  .posts-title a:visited {
    color: var(--primary);
  }
  .posts-title a:hover {
    color: var(--menu);
  }
  .date {
    font-size: 0.75em;
    margin-bottom: 0.25em;
  }
  li:hover {
    padding-bottom: 0.5em;
    border-bottom: 2px solid var(--hover);
  }
  @media (hover: hover) {
    a:hover button {
      box-shadow: -4px -4px 0 #000;
      transform: translate(4px, 4px);
    }
    a:hover button {
      outline-offset: 1px;
    }
  }
  @media (hover: none) {
    a:hover button {
      background-color: var(--menu);
    }
  }
  @media screen and (min-width: 200px) and (max-width: 667px) {
    main {
      margin: 0 10px;
    }
    span {
      font-size: 100%;
    }
    ul {
      width: 100%;
      margin: 0;
    }
  }
</style>

<section>
  <h2>Featured Articles</h2>
  <ul>
    <li>
      <a href="/blog/reverse-proxy-using-nginx-pihole-cloudflare/" rel="prefetch-intent">
      <p class="posts-title">Setting up a reverse proxy for HTTPS with a custom domain using Nginx Proxy Manager, Pi-Hole and Cloudflare</p>
      <p class="desc">
        I've used a reverse proxy to access my self-hosted apps and services for years, but I recently re-did everything from scratch and decided to write it down. When done, we'll be able to access our apps and services through a custom domain, with unique sub-domains for each app or service, with full HTTPS and accessible only locally.
      </p>
      </a>
    </li>    
    <li>
      <a href="/blog/self-host-website-cloudflare-tunnel/" rel="prefetch-intent">
      <p class="posts-title">Complete guide to self-hosting a website through Cloudflare Tunnel</p>
      <p class="desc">
          Self-hosting a static web blog has never been easier thanks to Cloudflare Tunnel. In this guide I explain how to expose a static website hosted on machine inside my network to the internet using Nginx as webserver and securing it with various free Cloudflare services.
      </p>
      </a>
    </li>
    <li>
      <a href="/blog/comprehensive-guide-tailscale-securely-access-home-network/" rel="prefetch-intent">
      <p class="posts-title">Comprehensive guide to setting up Tailscale to securely access your home network from anywhere</p>
      <p class="desc">
        Accessing self-hosted services from outside the home can be a challenge, especially when dealing with CGNAT and having to forward ports from the router. It can be complex to manage and potentially dangerous to your home network's privacy and security if not done right, but Tailscale makes it easy to set up encrypted peer-to-peer connections between devices across different networks. In this guide I will explain how I use Tailscale as a VPN for secure remote access to my home network.
      </p>
      </a>
    </li>
  </ul>
</section>